一、提供服务的关键过程
[1、添加Eureka的依赖］
     <!-- 添加Eureka的依赖 -->
    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-eureka</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
    </dependencies>
2、配置文件配置相关内容：

server:
  port: 9000
spring:
  jpa:
    generate-ddl: false
    show-sql: true
    hibernate:
      ddl-auto: none
  datasource:
    platform: h2
    schema: classpath:schema.sql
    data: classpath:data.sql
  application:
    name: microservice-provider-student
logging:
  level:
    root: INFO
    org.hibernate: INFO
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE
    com.steven.microservice: DEBUG
eureka:
  client:
    healthcheck:
      enabled: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.cloud.client.ipAddress}:${spring.application.instance_id:${server.port}}

3、建表语句：schema.sql

drop table student if exists;
create table student(
	id bigint generated by default as identity,
	name varchar(20),
	age int(3),
	primary key(id)
);

4、插库语句：data.sql
insert into student(id,name, age) values(1,'liu', 18);
insert into student(id,name, age) values(2,'yang', 19);
insert into student(id,name, age) values(3,'gan', 18);
insert into student(id,name, age) values(4,'li', 20);

5、POJO：
@Entity
public class Student {

	public Student(Long id, String name) {
		super();
		this.id = id;
		this.name = name;
	}

	public Student() {
		super();
	}

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long id;

	@Column
	private String name;

	@Column
	private Short age;

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Short getAge() {
		return age;
	}

	public void setAge(Short age) {
		this.age = age;
	}

}

6、DAO：

@Repository
public interface StudentRepository extends JpaRepository<Student, Long> {

}

7、Controller：
@RestController
public class StudentController {
	@Autowired
	private StudentRepository studentRepository;

	/**
	 * 根据学生ID获取学生的学生类信息对象
	 * 
	 * @param id
	 *            学生ID
	 * @return 学生类信息对象
	 */
	@GetMapping("/student/{id}")
	// @GetMapping("/{id}")是spring 4.3的新注解等价于：
	// @RequestMapping(value = "/id", method = RequestMethod.GET)
	public Student findById(@PathVariable Long id) {
		// replacing studentRepository.getOne(id) method call with
		// studentRepository.findOne(id) problem was gone.
		return studentRepository.findOne(id);
	}
}

